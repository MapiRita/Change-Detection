var image = ee.Image(ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
//filtriamo l'immaggine in base alla regione di interesse e in base alla data di interesse
.filterBounds(geometry)
.filterDate('2015-07-01', '2015-07-30')
//vado ad ordinare le immagine in base alla copertura delle nuvole
.sort('CLOUD_COVER')
//e con questo vado a prendere la prima immagine senza copertura delle nuvole
.first());
//con addlayer aggiungo sulla mappa l'immagine che abbiamo caricato
Map.addLayer(image, {bands: ['B4', 'B3', 'B2'],min:0, max: 3000}, 'True colour image2015');

//CLASSIFICAZIONE: voglio individuare sulla mia immagine l'area urbana (urban) e quella non urbana (not urban)
//cosi facendo (con la funzione marge) ho unito le features collections
var classNames = urban.merge(noturban);
print(classNames);
//andiamo a selezionare le bande di interesse (con sentinel2 cambiano)
var bands = ['B2', 'B3', 'B4', 'B5', 'B6', 'B7'];
//la fase in cui in base ai punti precedentemente presi vado a selezionare l'area urbana e non, la definizco 
var training = image.select(bands).sampleRegions({
  collection: classNames,
  properties: ['landcover'],
  scale: 30});
print(training);

//instanziamo il classificatore con la funzione SmileCart(algoritmo di classificazione basata sugli alberi binary)
var classifier = ee.Classifier.smileCart().train({
features: training,
classProperty: 'landcover',
inputProperties: bands
});



//Lanciamo la classificazione
var classified2015 = image.select(bands).classify(classifier);


//per visualizzare sul display la classificazione
Map.centerObject(classNames, 11);
Map.addLayer(classified2015,
{min: 0, max: 3, palette: ['red', 'white']},
'classification2015');

//2013
var image2013 = ee.Image(ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
//filtriamo l'immaggine in base alla regione di interesse e in base alla data di interesse
.filterBounds(geometry)
.filterDate('2013-07-01', '2013-07-30')
//vado ad ordinare le immagine in base alla copertura delle nuvole
.sort('CLOUD_COVER')
//e con questo vado a prendere la prima immagine senza copertura delle nuvole
.first());
//con addlayer aggiungo sulla mappa l'immagine che abbiamo caricato
Map.addLayer(image2013, {bands: ['B4', 'B3', 'B2'],min:0, max: 3000}, 'True colour image2013');

var classified2013 = image2013.select(bands).classify(classifier);
Map.addLayer(classified2013,
{min: 0, max: 3, palette: ['red', 'white']},
'classification2013');



//2017
var image2017 = ee.Image(ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
//filtriamo l'immaggine in base alla regione di interesse e in base alla data di interesse
.filterBounds(geometry)
.filterDate('2017-07-01', '2017-07-30')
//vado ad ordinare le immagine in base alla copertura delle nuvole
.sort('CLOUD_COVER')
//e con questo vado a prendere la prima immagine senza copertura delle nuvole
.first());
//con addlayer aggiungo sulla mappa l'immagine che abbiamo caricato
Map.addLayer(image2017, {bands: ['B4', 'B3', 'B2'],min:0, max: 3000}, 'True colour image2017');

var classified2017 = image2017.select(bands).classify(classifier);
Map.addLayer(classified2017,
{min: 0, max: 3, palette: ['red', 'white']},
'classification2017');


//2018
var image2018 = ee.Image(ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
//filtriamo l'immaggine in base alla regione di interesse e in base alla data di interesse
.filterBounds(geometry)
.filterDate('2018-07-01', '2018-07-30')
//vado ad ordinare le immagine in base alla copertura delle nuvole
.sort('CLOUD_COVER')
//e con questo vado a prendere la prima immagine senza copertura delle nuvole
.first());
//con addlayer aggiungo sulla mappa l'immagine che abbiamo caricato
Map.addLayer(image2018, {bands: ['B4', 'B3', 'B2'],min:0, max: 3000}, 'True colour image2018');

var classified2018 = image2018.select(bands).classify(classifier);
Map.addLayer(classified2018,
{min: 0, max: 3, palette: ['red', 'white']},
'classification2018');

//2019
var image2019 = ee.Image(ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
//filtriamo l'immaggine in base alla regione di interesse e in base alla data di interesse
.filterBounds(geometry)
.filterDate('2019-07-01', '2019-07-30')
//vado ad ordinare le immagine in base alla copertura delle nuvole
.sort('CLOUD_COVER')
//e con questo vado a prendere la prima immagine senza copertura delle nuvole
.first());
//con addlayer aggiungo sulla mappa l'immagine che abbiamo caricato
Map.addLayer(image2019, {bands: ['B4', 'B3', 'B2'],min:0, max: 3000}, 'True colour image2019');

var classified2019 = image2019.select(bands).classify(classifier);
Map.addLayer(classified2019,
{min: 0, max: 3, palette: ['red', 'white']},
'classification2019');

//2020
var image2020 = ee.Image(ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
//filtriamo l'immaggine in base alla regione di interesse e in base alla data di interesse
.filterBounds(geometry)
.filterDate('2020-07-01', '2020-07-30')
//vado ad ordinare le immagine in base alla copertura delle nuvole
.sort('CLOUD_COVER')
//e con questo vado a prendere la prima immagine senza copertura delle nuvole
.first());
//con addlayer aggiungo sulla mappa l'immagine che abbiamo caricato
Map.addLayer(image2020, {bands: ['B4', 'B3', 'B2'],min:0, max: 3000}, 'True colour image2020');

var classified2020 = image2020.select(bands).classify(classifier);
Map.addLayer(classified2020,
{min: 0, max: 3, palette: ['red', 'white']},
'classification2020');

//2021
var image2021 = ee.Image(ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
//filtriamo l'immaggine in base alla regione di interesse e in base alla data di interesse
.filterBounds(geometry)
.filterDate('2021-07-01', '2021-07-30')
//vado ad ordinare le immagine in base alla copertura delle nuvole
.sort('CLOUD_COVER')
//e con questo vado a prendere la prima immagine senza copertura delle nuvole
.first());
//con addlayer aggiungo sulla mappa l'immagine che abbiamo caricato
Map.addLayer(image2021, {bands: ['B4', 'B3', 'B2'],min:0, max: 3000}, 'True colour image2021');

var classified2021 = image2021.select(bands).classify(classifier);
Map.addLayer(classified2021,
{min: 0, max: 3, palette: ['red', 'white']},
'classification2021');


//CHANGE DETECTION

var urbanChange21_13 = classified2021.select('classification').add(classified2013.select('classification')).add(classified2013.select('classification'));
Map.addLayer(urbanChange21_13,{min:0, max:3, palette:['green', 'red', 'blue', 'purple']},
"2021-2013 urban change detection using Landsat-8");


var urbanChange19_15 = classified2019.select('classification').add(classified2015.select('classification')).add(classified2015.select('classification'));
Map.addLayer(urbanChange19_15,{min:0, max:3, palette:['green', 'red', 'blue', 'purple']},
"2019-2015 urban change detection using Landsat-8");


var urbanChange18_16 = classified2018.select('classification').add(classified2018.select('classification')).add(classified2018.select('classification'));
Map.addLayer(urbanChange18_16,{min:0, max:3, palette:['green', 'red', 'blue', 'purple']},
"2018-2016 urban change detection using Landsat-8");


